---
interface Props {
	variant?: 'offset' | 'small';
}

const { variant } = Astro.props;
---

<ul class:list={['grid', { offset: variant === 'offset', small: variant === 'small' }]}
	style="
		--quantity: 8;">
	<img class="imageSpread"
		style="--position: 1"
		alt="grid1."
		width=" 100"
		height="200"
		src="/assets/grid/grid1.jpg"
	/>

	<img class="imageSpread"
		style="--position: 2"
		alt="grid1."
		width=" 100"
		height="200"
		src="/assets/grid/grid2.jpg"
	/>

	<img class="imageSpread"
		style="--position: 3"
		alt="grid1."
		width=" 100"
		height="200"
		src="/assets/grid/grid3.jpg"
	/>

	<img class="imageSpread"
		style="--position: 4"
		alt="grid1."
		width=" 100"
		height="200"
		src="/assets/grid/grid4.jpg"
	/>

	<img class="imageSpread"
		style="--position: 5"
		alt="grid1."
		width=" 100"
		height="200"
		src="/assets/grid/grid8.jpg"
	/>
	
	<img class="imageSpread"
		style="--position: 6"
		alt="grid1."
		width=" 100"
		height="200"
		src="/assets/grid/grid5.jpg"
	/>

	<img class="imageSpread"
		style="--position: 7"
		alt="grid1."
		width=" 100"
		height="200"
		src="/assets/grid/grid6.jpg"
	/>

	<img class="imageSpread"
		style="--position: 8"
		alt="grid1."
		width=" 100"
		height="200"
		src="/assets/grid/grid7.jpg"
	/>

</ul>

<style>
	

	
	.imageSpread {
		aspect-ratio: 2 / 4;
		object-fit: cover;
		/* border-radius: 1.5rem; */
		box-shadow: var(--shadow-md);
		/* left: 100%; */

		/* animation: 5s scrolling infinite linear;  */
		/* animation-delay: calc((10s/var(--quantity)) * var(--position) - 1); */
	}
	
	@keyframes scrolling {
		from {
			transform: translate(100%);
		}
		to {
			transform: translate(50%));
		}
		
	}

	.grid {
		display: grid;
		grid-auto-rows: 1fr;
		gap: 1rem;
		list-style: none;
		padding: 0;
		white-space: nowrap;
	}

	.grid.small {
		grid-template-columns: 1fr 1fr;
		gap: 1.5rem;
	}

	/* If last row contains only one item, make it span both columns. */
	.grid.small > :global(:last-child:nth-child(odd)) {
		grid-column: 1 / 3;
	}

	@media (min-width: 50em) {
		.grid {
			grid-template-columns: 1fr 1fr;
			gap: 4rem;
		}

		.grid.offset {
			--row-offset: 7.5rem;
			padding-bottom: var(--row-offset);
		}

		/* Shift first item in each row vertically to create staggered effect. */
		.grid.offset > :global(:nth-child(odd)) {
			transform: translateY(var(--row-offset));
		}

		/* If last row contains only one item, display it in the second column. */
		.grid.offset > :global(:last-child:nth-child(odd)) {
			grid-column: 2 / 3;
			transform: none;
		}

		.grid.small {
			display: flex;
			/* flex-wrap: wrap; */
			justify-content: center;
			width: 100%;
			height: 80%;
			gap: .01rem;
			/* position: relative; */
		}

		.grid.small > :global(*) {
			flex-basis: 100%;
			white-space: nowrap;
		}
	}
</style>
